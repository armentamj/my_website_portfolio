<div class="chat-show-big light_window" data-current-user-id="<%= current_user.id %>">
  <h1 class="showcase-h1 chat-show-h1">
    <%= @other_person.name %>
  </h1>
  <div class="messages-thread">
    <%= turbo_stream_from "chat_#{@chat.id}_messages" %>
    <%= turbo_frame_tag "messages" do %>
      <% if @messages.any? %>
        <% @messages.each do |message| %>
          <%= render partial: "messages/message", locals: { message: message } %>
        <% end %>
      <% else %>
        <p class="no-messages">You have no messages from or for <%= @chat.friend.name %>.</p>
      <% end %>
    <% end %>
  </div>
  <%= form_with(model: [@chat, @message], data: { turbo_stream: true }, class: "formie") do |form| %>
    <%= form.text_area :body, placeholder: "Type your message...", class: "formie-text-area" %>
    <%= form.submit "Send", class: "formie-send csb-light", data: { disable_with: false } %>
  <% end %>
</div>
<script>
  function scrollMessagesToBottom() {
    const messages = document.querySelector(".messages-thread");
    if (messages) {
      setTimeout(() => {
        messages.scrollTop = messages.scrollHeight;
      }, 50);
    }
  }

  function decorateMessageEl(messageEl, currentUserId) {
    const messageUserId = messageEl.dataset.userId;
    if (!messageUserId) return;

    if (parseInt(messageUserId) === parseInt(currentUserId)) {
      messageEl.classList.add('me');
    } else {
      messageEl.classList.add('friend');
    }
  }

  function decorateAllMessages() {
    const chatContainer = document.querySelector('.chat-show-big');
    if (!chatContainer) return;

    const currentUserId = chatContainer.dataset.currentUserId;
    if (!currentUserId) return;

    document.querySelectorAll('.messages-thread .message').forEach(messageEl => {
      decorateMessageEl(messageEl, currentUserId);
    });
  }

  function observeNewMessages() {
    const chatContainer = document.querySelector('.chat-show-big');
    if (!chatContainer) return;

    const currentUserId = chatContainer.dataset.currentUserId;
    if (!currentUserId) return;

    const target = document.querySelector('.messages-thread');
    if (!target) return;

    const observer = new MutationObserver((mutationsList) => {
      for (const mutation of mutationsList) {
        mutation.addedNodes.forEach(node => {
          if (node.nodeType === 1 && node.classList.contains('message')) {
            decorateMessageEl(node, currentUserId);
            scrollMessagesToBottom();
          }
        });
      }
    });

    observer.observe(target, {
      childList: true,
      subtree: true
    });
  }

  document.addEventListener("turbo:load", () => {
    scrollMessagesToBottom();
    decorateAllMessages();
    observeNewMessages();
  });

  document.addEventListener("turbo:submit-end", () => {
    scrollMessagesToBottom();
    const input = document.querySelector(".formie-text-area");
    if (input) input.value = "";
  });
</script>


